<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN">

<HTML>
<HEAD>
<META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html;CHARSET=Shift_JIS">
<META NAME="AUTHOR" CONTENT="SHINTA">
<LINK REL=STYLESHEET TYPE="text/css" HREF="SHIHelp.css" TITLE="SHINTA Help Style">

<META NAME="KEYWORDS" CONTENT="鼻歌採譜プラグイン,">
<TITLE>鼻歌採譜プラグイン Ver 1.1 ヘルプ</TITLE>
</HEAD>
<BODY CLASS="CONTENT">

<P ALIGN="right">
<A HREF="../SaiLis_JPN.htm" TARGET="_top">フレーム使用</A>　<A HREF="SaiLis_JPN_Ctt.htm" TARGET="_top">フレーム不使用</A>
</P>


<A NAME="Hajimeni"></A>
<H1>はじめに</H1>
<A NAME="Gaiyou"></A>
<H2>概要</H2>
<P>
　鼻歌を歌って UTAU に音符を入力できる、UTAU 用プラグインです。<BR>
<BR>
　「た〜たたた♪」というように歌詞をすべて「た」にして歌ったものを WAVE ファイルに録音しておき、その WAVE ファイルを解析することにより、歌の音長・音程を UTAU に自動入力します。<BR>
<BR>
　鼻歌採譜プラグインは、WAVE トレース方式の自動調声プラグイン「<A HREF="http://www2u.biglobe.ne.jp/~shinta/SoftStand.htm?_SS_WinApp.htm#UTALis" TARGET="_blank">うたりす</A>」が搭載している「採譜モード」を強化・独立させたものです。うたりすと関連が深いので、「うたりすファミリー」という位置づけになっています。<BR>
<BR>
　よりよい解析を行うために、みなさんからのデータ提供をお待ちしております。ご協力宜しくお願いします。→<A HREF="#DataTeikyou">データ提供章</A>参照<BR>
</P>
<A NAME="Install"></A>
<H2>インストール</H2>
<P>
　ダウンロードしたアーカイブ（zip ファイル）を UTAU のウィンドウにドラッグ＆ドロップすると、鼻歌採譜プラグインがインストールされます。<BR>
</P>
<A NAME="Tsukaikata"></A>
<H1>使い方</H1>
<P>
　鼻歌採譜プラグインを使う際は、<BR>
<OL>
<LI>鼻歌を「た」で歌って WAVE ファイルに録音</LI>
<LI>UTAU のテンポを設定</LI>
<LI>鼻歌採譜プラグインを起動</LI>
</OL>
という流れになります。それぞれについてこれから説明します。<BR>
<BR>
　鼻歌採譜プラグインの紹介動画（<A HREF="http://www.nicovideo.jp/watch/sm11120832" TARGET="_blank">http://www.nicovideo.jp/watch/sm11120832</A>）でも使い方を解説していますので、参考にして下さい。<BR>
</P>
<A NAME="HanautanoRokuon"></A>
<H2>鼻歌の録音</H2>
<P>
　鼻歌採譜プラグインが対応している WAVE ファイル形式は以下のようになっていますので、鼻歌を録音する際は、以下の設定にして下さい。<BR>
<TABLE>
<TR><TH CLASS="General">サンプリング周波数</TH><TD CLASS="General">44.1kHz</TD></TR>
<TR><TH CLASS="General">チャンネル数</TH><TD CLASS="General">モノラル（推奨）／ステレオ</TD></TR>
<TR><TH CLASS="General">量子化ビット数</TH><TD CLASS="General">16 ビット（推奨）／8 ビット</TD></TR>
<TR><TH CLASS="General">フォーマット</TH><TD CLASS="General">リニア PCM</TD></TR>
</TABLE>
　鼻歌は、「た〜たたた♪」というように、全ての歌詞を「た」で歌って下さい。きちんと検証したわけではないのですが、「た」で歌うと、他の文字よりも採譜の成功率がわりと高まると思います。<BR>
<BR>
　全て「た」だと早口の部分を歌うのが難しいと思いますが、その場合は「ら」を混ぜてもある程度大丈夫です。「たたらたったた〜♪」みたいな感じです。<BR>
<BR>
　一応、「た」以外でも、はっきりとした子音なら採譜できることになっています。母音（あいうえお）はダメです。母音に近いと思われる「な行」「ま行」「ん」もダメだと思います。<BR>
<BR>
　鼻歌を歌う際は、感情は込めずに、できるだけ正確な音程で歌うように心がけて下さい。イヤホンで原曲などを聴きながら録音すると、音程やテンポが取りやすくなるでしょう。<BR>
<BR>
　録音の際は、歌唱のみをソロで録音し（コーラス等は入れない）、歌唱以外のノイズがなるべく入らないように注意して下さい。<BR>
<BR>
　WAVE の先頭と末尾にはノイズが乗りやすい（録音ボタンを押した音等）ので注意して下さい。SoundEngine 等で先頭・末尾のノイズ部分を切り捨てることをオススメします。<BR>
<BR>
　音量の正規化（ノーマライズ）は不要です。<BR>
<BR>
　ちなみに、私は、リニア PCM 録音できる IC レコーダー、SANYO Xacti「ICR-PS285RM」で歌唱を録音し、PC に転送しています。モノラル録音推奨とかいいつつ、自分はステレオ録音ですが（笑）。他に、マイクデバイスとして使える Microsoft の「Xbox 360 Wireless Headset WH01」（型番は推定）も持っていますが、ノイズが多く、録音しようとすると常にレベルメーターがかなり振れている感じなので、使っていません。<BR>
</P>
<A NAME="UTAUnoTempoSettei"></A>
<H2>UTAU のテンポ設定</H2>
<P>
　UTAU を起動し、UTAU のテンポを設定します。<BR>
<BR>
　鼻歌採譜プラグインは、UTAU のテンポ設定を基準にして音長の解析を行うので、テンポは正確に設定して下さい。<BR>
<BR>
　既存の WAVE ファイルのテンポを測定するには、<A HREF="http://ackiesound.ifdef.jp/download.html#wt" TARGET="_blank">WaveTone</A> が便利です。<BR>
<BR>
　WaveTone を起動し、テンポを測定したい WAVE ファイルをドラッグ＆ドロップします。ドラッグ＆ドロップ時に表示されるダイアログの設定は適当で構いませんので、「解析」ボタンをクリックします。<BR>
<BR>
<IMG SRC="WaveToneTempo.png" ALT="" HEIGHT="428" WIDTH="366" ALIGN="right" HSPACE="10" VSPACE="10">
　解析が終了したら、［解析→テンポ解析］メニューをクリックすると、解析結果が表示されます。下の方に表示されている BPM がテンポです。一番上に表示されている BPM は違うので注意して下さい。<BR CLEAR="right">
</P>
<A NAME="HanautaSaifuPluginwoKidou"></A>
<H2>鼻歌採譜プラグインを起動</H2>
<P>
　テンポの設定を終えたら、鼻歌採譜プラグインを起動します。予め UTAU に音符を入力しておく必要はありません。まっさらな状態で、鼻歌採譜プラグインを起動して下さい。<BR>
<BR>
　鼻歌採譜プラグイン画面上で設定を行い、スタートボタンをクリックして下さい。採譜結果が UTAU データに反映されます。<BR>
<BR>
　以下で、鼻歌採譜プラグインの画面について説明していきます。項目名の上にマウスカーソルを合わせると、簡単なヘルプが表示されます。一部、グレーアウトで押せないボタンがあります。<BR>
<BR>
<IMG SRC="HanautaSaifu_MainWindow.png" ALT="" HEIGHT="303" WIDTH="645" ALIGN="left" HSPACE="10" VSPACE="10"><BR CLEAR="left">
</P>
<H3>歌唱 WAVE ファイル</H3>
<P>
　先ほど鼻歌を録音した WAVE ファイルのファイル名を、フルパスで入力します。WAVE ファイルをドラッグ＆ドロップすると簡単です。<BR>
</P>
<H3>オフセット</H3>
<P>
　オフセットを入れると、WAVE ファイルの先頭を削る（使わない）ことが出来ます。単位はミリ秒です。例えば、録音の際、録音ボタンを押してから 2 秒間歌わない状態があったのなら、オフセットに「2000」を指定します。<BR>
<BR>
　あまり使う場面は無いとは思いますが、オフセットにマイナス値を入れることもできます。マイナス値を入れた場合は、先頭に空白を付加します。<BR>
<BR>
　「試聴」ボタンをクリックすると、オフセットでの削られ具合を確認することが出来ます。<BR>
</P>
<H3>音程の範囲</H3>
<P>
　自分の歌唱の音程がどの範囲にあるのかを指定します。音程の表記方法は UTAU と同じで、例えば中央のドであれば C4、半音上がると C#4 というような表記になります。半角で入力して下さい。<BR>
<BR>
　うたりすの場合とは異なり、この範囲をあまり狭める必要はないかもしれません。デフォルト設定くらい広めに取ってもたぶん大丈夫だと思います。<BR>
<BR>
　なお、この「音程の範囲」は、次の「移調」の値に関係なく、「自分の歌唱そのもの」の音程で指定して下さい。<BR>
</P>
<H3>移調</H3>
<P>
　解析した音程を UTAU データに変換する際、移調することが出来ます。移調量は半音単位で、プラスなら上に、マイナスなら下に移調します。通常は 0 にしておけば大丈夫です。<BR>
<BR>
　原曲よりも 1 オクターブ「低く」歌った場合は、そのままだと 1 オクターブ「低い」UTAU データができあがってしまいます。この場合は、移調を「12」と指定し、1 オクターブ「持ち上げて」やることで、元の音程で UTAU データを入力することができます。<BR>
</P>
<H3>音長単位</H3>
<P>
　UTAU に入力する音符の長さを、ここで指定した長さの倍数にします。<BR>
<BR>
　例えば「8 分音符」を指定すると、UTAU には、8 分音符、4 分音符、付点 4 分音符、2 分音符……が入力されます。<BR>
<BR>
　採譜したい曲に使われている音符の長さの「半分の長さ」を指定すると良い結果になります。原曲の最短音符が 8 分音符の場合は、16 分音符を指定します。<BR>
</P>
<H3>クオンタイズ</H3>
<P>
　UTAU に入力する音符の始まる位置を、ここで指定する音符の種類に合わせます。<BR>
<BR>
　特別な理由が無い限り、「音長単位」と同じにしておくのが良いです。<BR>
</P>
<A NAME="DataTeikyou"></A>
<H1>データ提供</H1>
<P>
　今後の鼻歌採譜プラグイン開発の参考にさせていただきたく、データ提供にご協力いただければ幸いです。<BR>
<BR>
　うまく採譜できるケース、数音間違えるケース、全く採譜できないケース、いろいろあるかと思います。どのような歌唱 WAVE だとどのように採譜できるか、を知りたいです。<BR>
<BR>
　データ提供にご協力頂ける場合は、<BR>
<UL>
<LI>歌唱 WAVE</LI>
<LI>↑の歌唱 WAVE を採譜した際のログファイル（プラグインフォルダにある SaiLis.log）</LI>
</UL>
をどこかのアップローダにアップロードし、その URL の場所をメールにて私に教えて下さい。<BR>
<BR>
　鼻歌採譜プラグインを再度起動して「前回のログ」ボタンをクリックすると、前回のログファイルの内容が表示されますので、その内容をメールにコピペして、アップローダには WAVE ファイルのみ、という形でも構いません。<BR>
<BR>
　送り先メールアドレスは<A HREF="#DataBase">こちら</A>を参照下さい。<BR>
<BR>
　WAVE ファイルはメールでは送らないで下さい。<BR>
</P>
<A NAME="Gijutsukaisetsu"></A>
<H1>技術解説</H1>
<P>
　「どのような仕組みで採譜をしているのか？」というのが気になる方もいらっしゃるかもしれませんので、解説してみます。興味のない方はこの章を読み飛ばして下さい。<BR>
<BR>
　採譜処理は、音量解析、音長解析、音程解析、クオンタイズ処理を順に行っていきます。次節以降でそれぞれについて解説します。<BR>
</P>
<A NAME="Onryoukaiseki"></A>
<H2>音量解析</H2>
<P>
　音量解析は、下準備のようなもので、音量解析自体では、特段何もしません。WAVE ファイルの各地点での音量を、単純に 0〜1 の間で記録しておきます。便利のため、最大値が 1 になるように正規化を行っておきます。<BR>
</P>
<A NAME="Onchoukaiseki1"></A>
<H2>音長解析 STAGE 1：音符の区切りの検出</H2>
<P>
　音長解析は STAGE 1 と STAGE 2 の 2 段階からなります。STAGE 1 では、「どこが音符の区切りとなりえるか」を検出します。<BR>
<BR>
　音符の区切りの検出では、MFCC（メル周波数ケプストラム）という指標を用います。理論をきちんと理解していませんが、MFCC の差分二乗和が一定値以下なら音声が定常状態にあり、逆に、一定値以上なら音声は非定常状態にある、という区別ができます。音声が定常状態にあるというのはつまり母音ということで、逆に、子音→母音への流れが非定常的、ということになります。つまり、MFCC の差分二乗和が一定値以上の地点が、子音の先頭ということです。<BR>
<BR>
　「た〜たたた」で歌っている場合、子音の先頭で音符を区切れば良いので、MFCC の差分二乗和が一定値以上の地点で音符を区切ります。<BR>
<BR>
　ところで、音長解析を行う手法として、音量を元に解析する、という方法も考えられます。MFCC 差分二乗和を元に解析する方法と、どちらが良いのでしょうか。<BR>
<BR>
　「た」の先頭では音量がほぼゼロになるので、「音量がゼロから急激に上がる部分を音符の区切りとする」という解析が行えそうです。<BR>
<BR>
　しかし、「た」以外の歌詞、例えば「ら」で歌った場合、音量で解析するのは困難になります。「ら」の先頭では音量はゼロにならないからです。この点、MFCC 差分二乗和では、ある程度の解析が可能です。<BR>
<BR>
　鼻歌採譜プラグインの使用法を説明する際は、検出精度を考慮して「た」で歌うことを推奨していますが、本音は、どんな歌詞でも検出できるようにしたいと思っています。従って、「た」以外も検出しやすそうな MFCC 差分二乗和の方が良いと判断しています。<BR>
<BR>
　また、歌唱者や音程によっては、ずっと発音していても一地点ごとに音量が上下する場合もあり、音量を元に解析するとこのようなケースにも対応できません。<BR>
</P>
<A NAME="Onchoukaiseki2"></A>
<H2>音長解析 STAGE 2：検出した区切りの取捨選択</H2>
<P>
　STAGE 1 で検出した音符の区切りをすべて採用すると、音符がとても細かくなってしまいます。STAGE 2 では、それぞれの区切りを区切りとして採用するかどうかを判断し、不要な区切りを破棄します。<BR>
<BR>
　まず、明らかに不要な区切りとして、発音をやめた地点が区切りとして検出されている場合は、それを破棄します。MFCC 差分二乗和は定常常態か非定常状態かを表す指標なので、発音している状態→無音に変化した場合も、一定値以上になってしまうことがあり、STAGE 1 では区切りとして検出されています。この場合、音量を見て、発音→無音（下がりエッジ）なのかどうかを判断し、そうであれば破棄します。<BR>
<BR>
　次に、音長単位（鼻歌採譜プラグイン起動時にユーザーが設定した値）ごとに WAVE を区切ってみて、他の区切りに包含されてしまう区切りを破棄します。区切りが近接している場合、最初の区切りを採用すると、そこから音長単位の間は区切れませんので、次の区切りは破棄することになります。逆に、2 番目の区切りを採用することにした場合は、最初の区切りは採用できません。<BR>
<BR>
　どちらの区切りを採用するかは、MFCC 差分二乗和と音量の積を計算し、値が大きくなるほうの区切りを採用することにしています。その理由は、MFCC 差分二乗和が大きいほど明確な区切りであることと、発音している間は音量が大きいことから、両方を考慮して尤度を求めたかったからです。<BR>
<BR>
　以上により、区切りが定まりますので、区切りを先頭として、音長単位の間を音長とします。区切りと区切りの間が長い場合は、音長単位の倍数で出来る限り長くなるように音長を定めます。<BR>
</P>
<A NAME="Zukai"></A>
<H2>音長解析の図解</H2>
<P>
<IMG SRC="AnalyzeExample.png" ALT="" HEIGHT="246" WIDTH="334" ALIGN="right" HSPACE="10" VSPACE="10">
　音長解析の内容を視覚化したのが右の図です。<BR>
<BR>
　「た、た、たらた♪」と歌った時の波形データ（振幅）を、青い棒グラフが表しています。赤い折れ線グラフが MFCC 差分二乗和です。上部の灰色が、音長の解析結果です。真ん中あたりの黒いのは無視して下さい。<BR>
<BR>
　MFCC 差分二乗和の折れ線を見てみると、発音開始時に折れ線がピークになっているのが分かります。「ら」の時はピークが低いですが、なんとか拾えています。<BR>
<BR>
　折れ線のピークのうち、下がりエッジを除いたものが、上部の灰色の左側にある赤い線です。最後の「た」のすぐ左側にも赤い線がありますね。赤い線の間隔が音長単位より狭いので、どちらかしか採用できません。ピークの大きさや、音量の大きさを見て、左側ではなく右側のピークを採用しています。<BR CLEAR="right">
</P>
<A NAME="Onteikaiseki"></A>
<H2>音程解析</H2>
<P>
　音程解析では、まず、各音符の全地点で音程を求めます。<BR>
<BR>
　全地点で同じ音程であれば、その音符の音程が決定しますが、通常、そういうことはありません。<BR>
<BR>
　たとえば、ド→レ→ミと上昇している時の「レ」の音符の音程は、先頭のほうではドに近く、末尾のほうではミに近いでしょう。また、ビブラートがかかっていると、レとミを行ったり来たりしているかもしれません。音程の揺れをある程度吸収したうえで、「レ」と判定する必要があります。<BR>
<BR>
　揺れを吸収するために、2 種類の重み付け判定をしています。<BR>
<BR>
　1 つには、音符の両端の音程よりも、中心部の音程を優先します。音符の両端は、前後の音符の音程に引きずられやすいため、その音符の正しい音程を反映していない可能性が高いのです。<BR>
<BR>
　もう 1 つは、音量の大きい部分の音程を優先します。歌唱者の自信がある部分は音量も大きくなりそうな感じがするからです。でもこれは微妙かもしれませんが。<BR>
<BR>
　上記 2 つの重み付けを考慮したうえで、音符全体でどの音程がもっとも多いかを見ます。「ド」の地点が 10 地点、「レ」が 50 地点、「ミ」が 20 地点なら、「レ」の地点がもっとも多いので、その音符を「レ」と判断します。<BR>
<BR>
　音程は通常、半音単位で判定しますが、上位が接戦の場合は、セント単位（半音の 1/100）で判定して、最終結果を半音単位に丸めています。<BR>
</P>
<A NAME="Quantize"></A>
<H2>クオンタイズ</H2>
<P>
　音符の区切りがユーザー設定のクオンタイズとずれている場合は、ユーザー設定に合わせて音符を移動します。<BR>
<BR>
　移動は単純に、もっとも近いクオンタイズ地点に移動させているだけです。<BR>
<BR>
　以上で、採譜が完了します。<BR>
</P>
<A NAME="MFCCniTsuite"></A>
<H2>コラム：MFCC について</H2>
<P>
　音長解析に用いている MFCC（メル周波数ケプストラム）についてですが、私の理解の範囲で、MFCC って何ぞや、ってのを書いてみます。それ違う！　とかありましたら教えてください。<BR>
<BR>
<IMG SRC="Spectrum.png" ALT="" HEIGHT="175" WIDTH="219" ALIGN="right" HSPACE="10" VSPACE="10">
　音声の時間領域での波形（つまりは WAVE データ）をフーリエ変換すると、音声の周波数領域での波形（つまりスペクトラム）を得ることが出来ます。スペアナで見る、低音が大きいとか、高音が小さいとか、ってやつですね。<BR CLEAR="right">
<BR>
<IMG SRC="MelSpectrum.png" ALT="" HEIGHT="204" WIDTH="218" ALIGN="right" HSPACE="10" VSPACE="10">
　スペクトラムの横軸はリニア（マス目が均等）なわけですが、これを、人間の聴覚特性に応じて伸び縮みさせます。人間が敏感に区別できる周波数帯のマス目は細かく区切り、人間があまり感知しない周波数帯のマス目は大雑把に区切ります。この横軸の区切り方をメル尺度と言います。<BR>
<BR>
　次に、メル尺度上で均等に、スペクトラムのサンプルを 20 個取ります。メル尺度上でサンプルをとる（灰色のサンプルを捨てて、白いサンプルを取る）ことにより、人間が敏感な周波数帯のサンプルを多く取ることができます。20 個というのは、音声認識の業界で使われる経験上の個数です。<BR CLEAR="right">
<BR>
　取得した 20 個のスペクトラムの絶対値の対数に対して、さらにフーリエ変換（定義上フーリエ変換ですが、実用上はフーリエ逆変換でもいいらしい？）します。スペクトラムのスペクトラム、ということになりますが、これをケプストラムと呼びます。メル尺度上でスペクトラムのサンプルを取ったので、単なるケプストラムではなく、メル周波数ケプストラム（MFCC）と呼ばれます。なお、ケプストラムの尺度は再び時間になるのですが、元の時間とは意味合いが異なるようです。<BR>
<BR>
　MFCC （の低次側）から 12 個サンプルを取ると、音韻（つまり歌詞）の特定に役立つ数値が得られます。誰が歌っているかに関わらず、「あ」なら「あ」、「い」なら「い」で、12 個それぞれの値がだいたい同じになるようです。なお、12 個というのもやはり、音声認識の業界で用いられる経験的な個数です。<BR>
<BR>
　さてここで、ある時刻（たとえば 0.0 秒時点）と、そのちょっと後の時刻（0.1 秒時点）での MFCC を考えます。「あ〜〜〜（aaaaaaa）」と伸ばして歌っていた場合、0.0 秒でも 0.1 秒でも「あ」ですので、MFCC の 12 個の値はあまり変化しません。したがって、0.1 秒時点での MFCC の値と 0.0 秒時点での MFCC の値の差を求めると、ほとんどゼロになります。<BR>
<BR>
　一方で、「た〜〜〜」と歌った場合、「taaaaaaa」となりますので、0.0 秒は「t」、0.1 秒では「あ」となり、MFCC の 12 個の値が大きく変化します。よって、MFCC の差分がかなり大きくなります。<BR>
<BR>
　単なる差分よりも、差分二乗和の方が、差異が大きく出ますので、これにより、差分二乗和が大きければ、子音の先頭であると、判定できます。<BR>
<BR>
　以上が私の理解なのですが、この理屈で行くと、別に「た〜たたた」で歌わなくても、普通に歌えば音長は解析できそうなものなんですよね。母音でも、「あいう」と変化すれば、そこで MFCC が変化するのでしょうし。しかし実際には、「た」で歌ったほうが、音長を解析しやすい感じなんですよね……。なんでなんでしょう？<BR>
</P>
<A NAME="Sonota"></A>
<H1>その他</H1>
<A NAME="DataBase"></A>
<H2>データベース</H2>
<TABLE CLASS="General">
<TR><TH CLASS="General">種類別</TH><TD CLASS="General">フリーソフトウェア</TD></TR>
<TR><TH CLASS="General">名称</TH><TD CLASS="General">UTAU プラグイン</TD></TR>
<TR><TH CLASS="General">ソフトウェア名</TH><TD CLASS="General">鼻歌採譜プラグイン</TD></TR>
<TR><TH CLASS="General">紹介動画</TH><TD CLASS="General"><A HREF="http://www.nicovideo.jp/watch/sm11120832" TARGET="_blank">http://www.nicovideo.jp/watch/sm11120832</A></TD></TR>
<TR><TH CLASS="General">ダウンロード</TH><TD CLASS="General"><A HREF="http://www2u.biglobe.ne.jp/~shinta/SoftStand.htm?_SS_WinApp.htm#SaiLis" TARGET="_blank">http://www2u.biglobe.ne.jp/~shinta/SoftStand.htm?_SS_WinApp.htm#SaiLis</A></TD></TR>
<TR><TH CLASS="General">バージョン</TH><TD CLASS="General">Ver 1.1</TD></TR>
<TR><TH CLASS="General">対応 OS</TH><TD CLASS="General">Windows 2000 以降</TD></TR>
<TR><TH CLASS="General">対応 UTAU バージョン</TH><TD CLASS="General">Ver 0.2.75</TD></TR>
<TR><TH CLASS="General">ライセンス</TH><TD CLASS="General"><A HREF="http://creativecommons.org/licenses/by-nc-nd/2.1/jp/" TARGET="_blank" CLASS="TB">クリエイティブ・コモンズ・ライセンス（表示 - 非営利 - 改変禁止 2.1 日本）</A><BR>※営利目的で使用したい場合は事前にご相談下さい。<BR>※第三者から提供されている部分を除きます。第三者から提供されている部分については、元のライセンスに従います。<BR></TD></TR>
<TR><TH CLASS="General">作者</TH><TD CLASS="General">ＳＨＩＮＴＡ</TD></TR>
<TR><TH CLASS="General">作者 E メール</TH><TD CLASS="General"><A HREF="mailto:shinta.0806[at]gmail.com"><IMG SRC="MailAddr.png" ALT="" HEIGHT="17" WIDTH="175" BORDER="0"></A></TD></TR>
<TR><TH CLASS="General">作者ホームページ</TH><TD CLASS="General"><A HREF="http://www2u.biglobe.ne.jp/~shinta/" TARGET="_blank">http://www2u.biglobe.ne.jp/~shinta/</A></TD></TR>
<TR><TH CLASS="General">サポートページ</TH><TD CLASS="General"><A HREF="http://www2u.biglobe.ne.jp/~shinta/SoftStand.htm?_SC_WA_SaiLis.htm" TARGET="_blank">http://www2u.biglobe.ne.jp/~shinta/SoftStand.htm?_SC_WA_SaiLis.htm</A></TD></TR>
<TR><TH CLASS="General">製品番号</TH><TD CLASS="General">SHWI-024-A</TD></TR>
</TABLE>
<A NAME="KaiteiRireki"></A>
<H2>改訂履歴</H2>
<P>
　<A HREF="../History.txt" TARGET="_top">History.txt</A> をご覧下さい。<BR>
</P>
<A NAME="Shaji"></A>
<H2>謝辞</H2>
<P>
　鼻歌採譜プラグインは多くの方々のご支援に後押しされて、ここまで来ることが出来ました。ありがとうございます。<BR>
<UL>
<LI>音声認識エンジン「Julius」を開発・公開して下さっているみなさん。</LI>
<LI>音声処理ライブラリ「ASAnalyzer」を公開して下さっているあっきーさん。</LI>
<LI>うたりすのアイコン（鼻歌採譜プラグイン共用）を作成して下さったＩＮＡっちさん。</LI>
<LI>歌唱データを提供して下さったみなさん。</LI>
<LI>鼻歌採譜プラグイン紹介動画をご視聴下さったみなさま。</LI>
<LI>鼻歌採譜プラグインをご利用頂いているみなさま。</LI>
<LI>動画コメント等でご意見、ご感想を下さったみなさま。</LI>
<LI>日記、ブログ等でうたりすを取り上げて下さったみなさま。</LI>
<LI>その他、関連する全ての方々。</LI>
</UL>
　今後ともよろしくお願いします。<BR>
</P>
<A NAME="Sakuhinsyoukai"></A>
<H1>作品紹介</H1>

<P>
　いずれもＳＨＩＮＴＡのホームページ『<A HREF="http://www.geocities.com/SiliconValley/Station/8180/Trans.htm" TARGET="_new">翔星ワールド</A>』で入手できます。<BR>
</P>

<A NAME="Windowsyousoftware"></A>
<H2>Ｗindows用ソフトウェア</H2>

<A NAME="ChochoitoInstall"></A>
<H3>ちょちょいとインストール</H3>
<P>
　アプリケーションのインストールを簡単に行うためのソフトウェアです。もちろんアンインストールもできます。<BR>
　最大の特長は、アプリケーションの移動（アプリケーションをインストールしたあとでインストール先のフォルダを変える）ができることです。ただファイルをコピーするだけでなく、スタートメニューや関連づけの設定もきちんと更新します。<BR>
</P>

<A NAME="ChochoitoGuranmikkusu"></A>
<H3>ちょちょいとグランミックス</H3>
<P>
　ファイルの暗号化及び解凍（復号）を行うソフトウェアです。<BR>
　暗号というとどうしても「面倒くさい」というイメージがつきまといますが、ちょちょいとグランミックスは極力面倒くささを排除するように設計されています。暗号化と解凍はファイルをドラッグ＆ドロップするだけ。また、暗号化したファイルをダブルクリックすれば、パスワード入力後に解凍され、適切なアプリケーションによって開かれます。ファイルを使い終われば自動的に再暗号化されます。暗号化されていないファイルを使う場合と比べて増える手間は、パスワードを入力するわずかな手間だけです。<BR>
</P>

<A NAME="ChochoitoKoushinPetapon"></A>
<H3>ちょちょいと更新ペタポン</H3>
<P>
　ホームページ（ＨＴＭＬファイル）に、更新日を記入するソフトウェアです。<BR>
　ホームページのトップページや目次ページには、「○○のコーナーを△月×日に更新しました。」などと書いて、訪れる人に更新したことを知らせますね。しかし、更新日を書くという作業は意外と面倒なもの。特に、コーナーの数が多い場合や、複数のページに更新情報を書く場合はなおさらです。<BR>
　そんな時、ちょちょいと更新ペタポンを使えば、ボタン１つで簡単に更新日を記入することができます。あらかじめ指定しておいた箇所全てに記入し、しかも、リンク先のファイルにまで自動で記入されるのでさらにお手軽です。<BR>
</P>

<A NAME="ChochoitoMemoryMonitor"></A>
<H3>ちょちょいとメモリモニター</H3>
<P>
　パソコンに搭載されている全メモリの量と、空きメモリの量を表示するソフトウェアです。仮想メモリ（スワップファイル）の情報も表示することができます。<BR>
　空きメモリの量はしばしば変化しますが、「更新」ボタンを押せばいつでも最新の情報を得られます。また、更新した時は前回の値との比較が表示されるので、例えば、ソフトを起動する前と後で情報を更新すれば、そのソフトウェアが占有するメモリの量が分かります。定期的に情報を更新することもできます。<BR>
</P>

<A NAME="HontonoHimaTsubushi"></A>
<H3>ホントの暇つぶし</H3>
<P>
　タイトルが示すとおり、暇をつぶすためのソフトです。ジャンケンゲーム、数当てゲーム、素数探索の３つが出来ます。<BR>
　暇で暇でしょうがない、という時に使って下さい。猫の手も借りたいほど忙しいという時は、決して使ってはいけません。<BR>
</P>

<A NAME="BeOSyousoftware"></A>
<H2>ＢeＯＳ用ソフトウェア</H2>

<A NAME="Be88BASIC"></A>
<H3>Ｂe88-ＢＡＳＩＣ</H3>
<P>
　ＢＡＳＩＣインタープリタです。<BR>
　ＮＥＣのＰＣ-9800シリーズ用ＢＡＳＩＣインタープリタ「Ｎ88-日本語ＢＡＳＩＣ(86)（Ｄisk版） Ver 6.0」と互換性があります。<BR>
</P>

<A NAME="BenaLife"></A>
<H3>ＢeなＬife</H3>
<P>
　一昔前に大流行したというライフゲームを<EM CLASS="B">Ｂ</EM><EM CLASS="E">e</EM>ＯＳ用にしたものです。<BR>
　フィールド上の各生命体は、隣接する生命体との相互関係によって、次の世代まで生き残るか、死ぬか、はたまた新しく生まれるかが決まります。はじめにいくつか生命体を配置し、時の移り変わりによって生命体の存在位置がどのように移り変わっていくかを見て楽しむシミュレーションゲームです。<BR>
</P>

<A NAME="CLLyricsDisplayer"></A>
<H3>CL-Lyrics Displayer</H3>
<P>
　CL-Amp で再生されている曲に合わせて歌詞を表示する、CL-Amp 用プラグインです。<BR>
　タイムタグ付き歌詞ファイルと呼ばれるテキストファイルを準備することで、曲データの形式（ WAV、MP3 など）に関わり無く任意の曲の歌詞をタイミング良く表示することができます。<BR>
</P>

<A NAME="CLLyricsEditor"></A>
<H3>CL-Lyrics Editor</H3>

<P>
　タイムタグ付き歌詞ファイルを簡単に作成することができる、CL-Amp 用プラグインです。<BR>
　作成した歌詞ファイルは姉妹ソフトウェア「 CL-Lyrics Displayer 」で表示できる他、一般の歌詞表示ソフトウェアや歌詞表示機能付きマルチメディアプレーヤなどでも表示できます。<BR>
</P>

<A NAME="DESLECT"></A>
<H3>ＤＥＳＬＥＣＴ</H3>
<P>
　最大４人まで同時プレイ可能な、対戦型早押しクイズゲームです。<BR>
　<EM CLASS="B">Ｂ</EM><EM CLASS="E">e</EM>ＯＳには大勢でわいわい遊べるゲームが少ないと思ったので作ってみました。和やかなひとときを過ごすための一助になれば幸いです。１つしか残っていないケーキを誰が食べるか決めるのにも使えますね(^^)。<BR>
　コンピュータも参戦できるので、少人数の場合でも遊べます。<BR>
</P>

<A NAME="LightMIDI"></A>
<H3>ＬightＭＩＤＩ</H3>
<P>
　外部ＭＩＤＩ音源に出力できるＭＩＤＩプレーヤーです。ＢeＯＳ内蔵ソフトシンセサイザーにも出力できます。<BR>
　プレイリストを保持できるので、いつでも簡単に好きな曲を再生できます。<BR>
　リピート再生、ランダム再生もできます。<BR>
</P>

<A NAME="ChochoitoiCat"></A>
<H3>ちょちょいとiＣat</H3>
<P>
　指定したフォルダ（複数指定可）の中にある画像ファイル（png,gif,jpeg）を一覧表示できるＨＴＭＬファイルを生成します。<BR>
　インターネットからダウンロードしたたくさんの画像ファイルをまとめて見たり、自分のホームページにアップロードする画像を管理したりするのに便利です。<BR>
　ＧＵＩアプリケーションですが、ＨＴＭＬ生成エンジンはシェルスクリプトなのでコマンドラインでも使えます。<BR>
</P>

<A NAME="ChochoitoArchiver"></A>
<H3>ちょちょいとアーカイバ</H3>
<P>
　手軽にファイルを圧縮・解凍するユーティリティーです。<BR>
　トランスアーカイバと呼ばれるアドオンをインストールすることにより、任意の形式の書庫を扱えます。<BR>
</P>

<A NAME="ChochoitoEnseffector"></A>
<H3>ちょちょいとアンセフェクター</H3>
<P>
　再生中のＭＩＤＩの曲の音色をリアルタイムに変更するアプリケーションです。アプリケーション間ＭＩＤＩ通信を利用して音色を変更します。<BR>
　チャンネル毎に個別に音色を変更できるほか、複数のチャンネルの音色を一度に変更することができます。<BR>
</P>

<A NAME="ChochoitoEriso"></A>
<H3>ちょちょいとえりそぉ</H3>
<P>
　各種画像を集めてリソースファイルを作成します。画像をビットマップに展開せずにそのまま格納するので、リソースファイルのサイズが大きくなりません。<BR>
</P>

<A NAME="ChochoitoClip"></A>
<H3>ちょちょいとクリップ</H3>
<P>
　クリップボードの履歴を保持するソフトウェアです。<BR>
　通常、データをクリップボードにコピーすると、以前クリップボードに記憶されていたデータは失われてしまいます。ちょちょいとクリップはクリップボードにコピーされた文字列をずっと記憶しておき、後で使いたくなったときにいつでも使えるようにします。文字列の色や大きさなども記憶されます。ドラッグ＆ドロップで簡単に使えます。<BR>
</P>



</BODY>
</HTML><! /End Of HTML >

